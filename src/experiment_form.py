# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import matplotlib.pyplot as plt
from itrac_grid import *
import matplotlib  
matplotlib.use('Qt5Agg')
import matplotlib.pyplot as plt 
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from alpha_vantage.timeseries import TimeSeries
import pandas as pd 
import numpy as np 


class Ui_Main(object):
    def setupUi(self, Main):
        Main.setObjectName("Main")
        Main.resize(800, 600)

        self.stock = 'SPY'
        self.data, self.meta_data = ts.get_daily(symbol=self.stock, outputsize='full')
        self.last_n_days = 365

        self.figure = plt.figure(1)
        self.figure2 = plt.figure(2)
        self.centralwidget = QtWidgets.QWidget(Main)
        self.centralwidget.setObjectName("centralwidget")

        self.centralwidget.setStyleSheet('background-color:#d6d8ff')

        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")

        self.container_layout = QtWidgets.QVBoxLayout()
        self.container_layout.setObjectName("container_layout")

        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.grid_type_title = QtWidgets.QLabel(self.centralwidget)
        self.grid_type_title.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.grid_type_title.setObjectName("grid_type_title")

        self.horizontalLayout_2.addWidget(self.grid_type_title)

        self.symbol_title = QtWidgets.QLabel(self.centralwidget)
        self.symbol_title.setObjectName("symbol_title")
        self.horizontalLayout_2.addWidget(self.symbol_title)
        self.container_layout.addLayout(self.horizontalLayout_2)

        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.parameters_vertical_layout = QtWidgets.QVBoxLayout()
        self.parameters_vertical_layout.setObjectName("parameters_vertical_layout")

        self.parameters_subtitle = QtWidgets.QLabel(self.centralwidget)
        self.parameters_subtitle.setObjectName("parameters_subtitle")
        self.parameters_vertical_layout.addWidget(self.parameters_subtitle)
        self.parameters_subtitle.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)

        self.parameters_grid_layout = QtWidgets.QGridLayout()
        self.parameters_grid_layout.setObjectName("parameters_grid_layout")
        self.operation_type_label = QtWidgets.QLabel(self.centralwidget)
        self.operation_type_label.setObjectName("label_12")
        self.parameters_grid_layout.addWidget(self.operation_type_label, 2, 0, 1, 2)
        self.operation_type_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.operation_type_edit.setObjectName("operation_type_edit")
        self.parameters_grid_layout.addWidget(self.operation_type_edit, 2, 2, 1, 2)
        self.width_label = QtWidgets.QLabel(self.centralwidget)
        self.width_label.setObjectName("width_label")
        self.parameters_grid_layout.addWidget(self.width_label, 0, 2, 1, 1)
        self.trace_size_label = QtWidgets.QLabel(self.centralwidget)
        self.trace_size_label.setObjectName("trace_size_label")
        self.parameters_grid_layout.addWidget(self.trace_size_label, 1, 0, 1, 2)
        self.trace_size_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.trace_size_edit.setObjectName("trace_size_edit")
        self.parameters_grid_layout.addWidget(self.trace_size_edit, 1, 2, 1, 2)
        self.grid_type_label = QtWidgets.QLabel(self.centralwidget)
        self.grid_type_label.setObjectName("grid_type_label")
        self.parameters_grid_layout.addWidget(self.grid_type_label, 3, 0, 1, 2)
        self.height_label = QtWidgets.QLabel(self.centralwidget)
        self.height_label.setObjectName("height_label")
        self.parameters_grid_layout.addWidget(self.height_label, 0, 0, 1, 1)
        self.height_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.height_edit.setObjectName("height_edit")
        self.parameters_grid_layout.addWidget(self.height_edit, 0, 1, 1, 1)
        self.grid_type_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.grid_type_edit.setObjectName("grid_type_edit")
        self.parameters_grid_layout.addWidget(self.grid_type_edit, 3, 2, 1, 2)
        self.width_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.width_edit.setObjectName("width_edit")
        self.parameters_grid_layout.addWidget(self.width_edit, 0, 3, 1, 1)
        self.advanced_options_label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.advanced_options_label.sizePolicy().hasHeightForWidth())
        self.advanced_options_label.setSizePolicy(sizePolicy)
        self.advanced_options_label.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.advanced_options_label.setWordWrap(True)
        self.advanced_options_label.setObjectName("advanced_options_label")
        self.parameters_grid_layout.addWidget(self.advanced_options_label, 4, 0, 1, 1)

        self.submit_button = QtWidgets.QPushButton(self.centralwidget)
        self.submit_button.setObjectName("submit_button")
        self.submit_button.clicked.connect(self.submit_function)
        self.parameters_grid_layout.addWidget(self.submit_button, 4, 1, 1, 3)

        self.parameters_grid_layout.setColumnStretch(0, 1)
        self.parameters_grid_layout.setColumnStretch(1, 1)
        self.parameters_grid_layout.setColumnStretch(2, 1)
        self.parameters_grid_layout.setColumnStretch(3, 1)
        self.parameters_vertical_layout.addLayout(self.parameters_grid_layout)

        self.parameters_grid_layout.setAlignment(QtCore.Qt.AlignVCenter)


        self.parameters_vertical_layout.setStretch(0, 2)
        self.parameters_vertical_layout.setStretch(1, 12)
        self.horizontalLayout.addLayout(self.parameters_vertical_layout)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")

        self.performance_subtitle = QtWidgets.QLabel(self.centralwidget)
        self.performance_subtitle.setObjectName("performance_label")
        self.verticalLayout_7.addWidget(self.performance_subtitle)
        self.performance_subtitle.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)

        self.accuracy_label = QtWidgets.QLabel(self.centralwidget)
        self.accuracy_label.setObjectName("accuracy_label")
        self.verticalLayout_7.addWidget(self.accuracy_label)
        self.acc_above_label = QtWidgets.QLabel(self.centralwidget)
        self.acc_above_label.setObjectName("acc_above_label")
        self.verticalLayout_7.addWidget(self.acc_above_label)
        self.acc_below_label = QtWidgets.QLabel(self.centralwidget)
        self.acc_below_label.setObjectName("acc_below_label")
        self.verticalLayout_7.addWidget(self.acc_below_label)
        self.horizontalLayout.addLayout(self.verticalLayout_7)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")

        self.todays_trace_subtitle = QtWidgets.QLabel(self.centralwidget)
        self.todays_trace_subtitle.setObjectName("todays_trace_subtitle")
        self.verticalLayout_8.addWidget(self.todays_trace_subtitle)
        self.todays_trace_subtitle.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)

        #self.widget_2 = QtWidgets.QWidget(self.centralwidget) 
        self.trace_plot_frame = QtWidgets.QFrame(self.centralwidget) 
        self.trace_plot_frame.setObjectName("trace_plot_frame")
        self.verticalLayout_8.addWidget(self.trace_plot_frame)

        self.trace_plot_canvas = FigureCanvas(self.figure)
        self.trace_plot_frame.addWidget(self.trace_plot_canvas)

        self.trace_score_label = QtWidgets.QLabel(self.centralwidget)
        self.trace_score_label.setObjectName("trace_score_label")
        self.verticalLayout_8.addWidget(self.trace_score_label)
        self.verticalLayout_8.setStretch(0, 1)
        self.verticalLayout_8.setStretch(1, 2)
        self.verticalLayout_8.setStretch(2, 1)
        self.horizontalLayout.addLayout(self.verticalLayout_8)
        self.horizontalLayout.setStretch(0, 1)
        self.horizontalLayout.setStretch(1, 1)
        self.horizontalLayout.setStretch(2, 1)
        self.container_layout.addLayout(self.horizontalLayout)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.container_layout.addWidget(self.line)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")

        #self.widget = QtWidgets.QWidget(self.centralwidget)
        self.performance_plot_canvas = QtWidgets.QFrame(self.centralwidget)
        self.performance_plot_canvas.setObjectName("performance_plot_canvas")
        self.horizontalLayout_3.addWidget(self.performance_plot_canvas)

        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        spacerItem.sizePolicy = QtWidgets.QSizePolicy.Minimum

        self.verticalLayout_9.addItem(spacerItem)
        self.alpha_plus_label = QtWidgets.QLabel(self.centralwidget)
        self.alpha_plus_label.setObjectName("alpha_plus_label")
        self.verticalLayout_9.addWidget(self.alpha_plus_label)

        self.alpha_plus_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.alpha_plus_edit.editingFinished.connect(self.update_performance_data)
        self.alpha_plus_edit.setObjectName("alpha_plus_edit")
        self.verticalLayout_9.addWidget(self.alpha_plus_edit)

        self.alpha_minus_label = QtWidgets.QLabel(self.centralwidget)
        self.alpha_minus_label.setObjectName("alpha_minus_label")
        self.verticalLayout_9.addWidget(self.alpha_minus_label)
        self.alpha_minus_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.alpha_minus_edit.setObjectName("alpha_minus_edit")
        self.verticalLayout_9.addWidget(self.alpha_minus_edit)
        spacerItem1 = QtWidgets.QSpacerItem(20, 100, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout_9.addItem(spacerItem1)
        self.horizontalLayout_3.addLayout(self.verticalLayout_9)
        self.horizontalLayout_3.setStretch(0, 7)
        self.horizontalLayout_3.setStretch(1, 1)
        self.container_layout.addLayout(self.horizontalLayout_3)
        self.container_layout.setStretch(0,1)
        self.container_layout.setStretch(1,5)
        self.container_layout.setStretch(3,6)

        self.verticalLayout.addLayout(self.container_layout)
        Main.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Main)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        Main.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Main)
        self.statusbar.setObjectName("statusbar")
        Main.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(Main)
        QtCore.QMetaObject.connectSlotsByName(Main)

    def retranslateUi(self, Main):
        _translate = QtCore.QCoreApplication.translate
        Main.setWindowTitle(_translate("Main", "Main"))
        self.grid_type_title.setText(_translate("Main", "Grid Type"))
        self.symbol_title.setText(_translate("Main", "SPY"))
        self.parameters_subtitle.setText(_translate("Main", "Parameters"))
        self.operation_type_label.setText(_translate("Main", "Operation Type"))
        self.width_label.setText(_translate("Main", "Width"))
        self.trace_size_label.setText(_translate("Main", "Trace Size"))
        self.grid_type_label.setText(_translate("Main", "Grid Type"))
        self.height_label.setText(_translate("Main", "Height"))
        self.advanced_options_label.setText(_translate("Main", "Advanced Options"))
        self.submit_button.setText(_translate("Main", "Submit"))
        self.performance_subtitle.setText(_translate("Main", "Last 365 days performance"))
        self.accuracy_label.setText(_translate("Main", "Accuracy:"))
        self.acc_above_label.setText(_translate("Main", "Acc_above:"))
        self.acc_below_label.setText(_translate("Main", "Acc_below:"))
        self.todays_trace_subtitle.setText(_translate("Main", "Today\'s Trace"))
        self.trace_score_label.setText(_translate("Main", "Score: Signal:"))
        self.alpha_plus_label.setText(_translate("Main", "Alpha plus"))
        self.alpha_plus_edit.setText(_translate("Main", "1"))
        self.alpha_minus_label.setText(_translate("Main", "Alpha minus"))
        self.alpha_minus_edit.setText(_translate("Main", "1"))
        self.height_edit.setText(_translate("Main", "15"))
        self.width_edit.setText(_translate("Main", "15"))
        self.trace_size_edit.setText(_translate("Main", "15"))
        self.operation_type_edit.setText(_translate("Main", "W/L"))
        self.grid_type_edit.setText(_translate("Main", "wins"))
        self.menuFile.setTitle(_translate("Main", "File"))

    def submit_function(self):
        height = int(self.height_edit.text())
        width = int(self.width_edit.text())
        trace_size = int(self.trace_size_edit.text())
        grid_type = self.grid_type_edit.text()
        operation_type = self.operation_type_edit.text()
        alpha_plus = float(self.alpha_plus_edit.text())
        alpha_minus = float(self.alpha_minus_edit.text())

        
        close = self.data['4. close'].to_numpy()

        #Getting the trace
        y = close[0:trace_size]
        y = np.flip(y,0) # The first element on data is the last day. We have to flip the array
        y = y/y[-1]-1

        #Plot today's trace
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        ax.plot(y)
        self.trace_plot_canvas.draw()


        #Train Grid
        self.grid = Grid(height, width, trace_size, grid_type, operation_type)
        info = last_days_grid_info(close, last_n_days= self.last_n_days, grid=self.grid, eliminate_noise_thold=0.005)
        self.pred, self.mean, self.std = info

        #Plot other graph
        self.update_performance_data()

        
        print(height, width, trace_size, grid_type, operation_type, alpha_plus, alpha_minus)
        print('info: ', info[0])

    def update_performance_data(self):
        alpha_plus = float(self.alpha_plus_edit.text())
        alpha_minus = float(self.alpha_minus_edit.text())

        up_thold = self.mean + self.std*alpha_plus
        down_thold = self.mean - self.std*alpha_minus

        mask0 = self.pred[:,2] == 0
        mask1 = self.pred[:,2] == 1

        red = self.pred[mask0]
        green = self.pred[mask1]

        correct_red = sum(red[:,0] < down_thold)
        incorrect_red = sum(red[:,0] > up_thold)
        correct_green = sum(green[:,0] > up_thold)
        incorrect_green = sum(green[:,0] < down_thold)

        #metrics
        number_of_predictions = correct_green+correct_red + incorrect_red + incorrect_green
        acc = 100*(correct_red + correct_green)/number_of_predictions
        total = len(green) + len(red)
        acc_above = 100*correct_green/(correct_green + incorrect_red)
        acc_below = 100*correct_red/(correct_red + incorrect_green)
        part_above = 100*(incorrect_red + correct_green)/total
        part_below = 100*(incorrect_green + correct_red)/total
        part = 100*number_of_predictions/total

        #Plot the graph
        self.figure2.clear()
        ax2 = self.figure2.add_subplot(111)

        ax2.plot(self.pred[:,0], alpha=0.1)
        ax2.plot(range(self.last_n_days),np.ones(self.last_n_days)*up_thold, '--')
        ax2.plot(range(self.last_n_days),np.ones(self.last_n_days)*down_thold, '--', color='#333333')
        plt.scatter(red[:,1], red[:,0], s= 3, c='red', alpha = 1)
        plt.scatter(green[:,1], green[:,0], s= 3, c='green', alpha=1)

        self.performance_plot_canvas.draw()

        
        


if __name__ == "__main__":
    import sys

    API_KEY = 'MDT9LRDR9TIZGJLH'
    ts = TimeSeries(key=API_KEY, output_format='pandas')

    app = QtWidgets.QApplication(sys.argv)
    Main = QtWidgets.QMainWindow()
    ui = Ui_Main()
    ui.setupUi(Main)
    Main.show()
    sys.exit(app.exec_())
